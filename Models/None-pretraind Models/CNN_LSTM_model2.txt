import torch
import torch.nn as nn
from torch.autograd import Variable
from torchsummary import summary

class LambdaBase(nn.Sequential):
    def __init__(self, fn, *args):
        super(LambdaBase, self).__init__(*args)
        self.lambda_func = fn

    def forward_prepare(self, input):
        output = []
        for module in self._modules.values():
            output.append(module(input))
       # print(output)
        return output if output else input

class Lambda(LambdaBase):
    def forward(self, input):
        #print('input=', input.size())
        return self.lambda_func(self.forward_prepare(input))


model=nn.Sequential(
            nn.Conv2d(20, 64, kernel_size=(5,1)),
            nn.ReLU(),
            nn.Conv2d(64, 64, kernel_size=(5,1)),
            nn.ReLU(),
            nn.Conv2d(64, 64, kernel_size=(5,1)),
            nn.ReLU(),
            nn.Conv2d(64, 64, kernel_size=(5,1)),
            Lambda(lambda x: x.view(x.size(0),1,-1)),
            
            nn.LSTM(2981888, 32,2,batch_first=True),
            Lambda(lambda x: x[0]),
            Lambda(lambda x: x.view(x.size(0),-1)),
            nn.Softmax(dim=1),
)
model.in_features = 32
